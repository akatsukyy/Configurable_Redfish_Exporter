import yaml
import json
import logging
import re
from os import path
from jinja2 import Template
from jsonpath_ng.ext import parse 
import aiohttp
import asyncio
# import uvloop

# asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())
def readYAMLTemplate(templateFile, dynamicInput):
    config_file_path = path.join(path.dirname(__file__), templateFile)
    if path.isfile(config_file_path):
        with open(templateFile, 'r') as f:
            yamlContent = f.read()
            renderedContent = Template(yamlContent).render(dynamicInput)
            configData = yaml.safe_load(renderedContent)
            logging.debug("Component Schema Data: %s" % (configData))
            return configData
    else:
        logging.error("Can not find: %s" % (templateFile))
        return

def jsonpathCollector(content,expression,output='value'):
    jsonpath_expr = parse(str(expression))
    if output == 'fullpath&value':
        result = {str(match.full_path): match.value for match in jsonpath_expr.find(content)}
    else:
        result = [match.value for match in jsonpath_expr.find(content)]
        if result == []:
            return False
    return result

def getKeyDictFromURLPath(url, keyDict):
    pathSegment = [segment for segment in url.split("/") if segment]
    dataKeyDict = {key.replace(">>", "", 1): pathSegment[value] for key, value in keyDict.items() if key.startswith(">>")}
    return dataKeyDict

async def fetch(url,auth, session):
    auth = aiohttp.BasicAuth(username, password)
    async with session.get(url,auth=auth, ssl=False) as response:
        return await response.json()

async def fetch_all(urls,auth):
    timeout = aiohttp.ClientTimeout(total=30)
    dataRaw = dict() 
    async with aiohttp.ClientSession(timeout=timeout) as session:
        tasks = [fetch(url,auth, session) for url in urls]
        results = await asyncio.gather(*tasks)
        for url, result in zip(urls, results):
            dataRaw[url] = result
    return dataRaw

def dataReconstruction(serverAddress,username,password,templateDir,logLevel):
    logFormat = '%(asctime)s [%(levelname)s] [' + serverAddress + '] %(message)s'  
    logging.basicConfig(format=logFormat, level=logLevel.upper())
    endpointURL = "https://%s" % serverAddress
    auth = (username,password)
    base = templateDir + "schemas/Common.yml"
    commonSchema=readYAMLTemplate(base, {'serverAddress': serverAddress})

    for basePoint in commonSchema['Metadata']:
        logging.info(basePoint)
        if '$inituri' in commonSchema['Metadata'][basePoint]:
            logging.info(commonSchema['Metadata'][basePoint]['$inituri'])
            rootURI = [endpointURL + commonSchema['Metadata'][basePoint]['$inituri']]
            # rootURI = "https://10.98.11.12/redfish/v1/Systems"
            logging.info(rootURI)
            if '$jsonpath' in commonSchema['Metadata'][basePoint]:
                baseURI = asyncio.run(fetch_all(rootURI,auth))[rootURI[0]]
                logging.info(baseURI)
                logging.info(commonSchema['Metadata'][basePoint]['$jsonpath'])
                serverURI = jsonpathCollector(baseURI,str(commonSchema['Metadata'][basePoint]['$jsonpath']))
                if serverURI is False:
                    return
                else:
                    dataKeyDict = getKeyDictFromURLPath(serverURI[0], commonSchema['Metadata'][basePoint])
                    serverURI = [endpointURL + serverURI[0]]
                    vendorData = asyncio.run(fetch_all(serverURI,auth))[serverURI[0]]
                    if 'Manufacturer' in vendorData:
                        manufacturer = vendorData['Manufacturer']
                        logging.info("Manufacturer: %s" % (manufacturer))
                    else:
                        logging.error("We can't generate Manufacturer value, Please check JSONPath or else!")
                        return
                    
                    if 'Model' in vendorData:
                        model = vendorData['Model']
                        logging.info("Model: %s" % (model))
                    else:
                        logging.error("We can't generate Model value, Please check JSONPath or else!")
                        return

                    if 'Id' in vendorData:
                        vendorId = vendorData['Id']
                        logging.info("VendorId: %s" % (vendorId))
                    else:
                        logging.error("We can't generate VendorId value, Please check JSONPath or else!")
                        return

                    modelSchema = None
                    for i in commonSchema['ModelSchema']:
                        if i in manufacturer:
                            logging.info("This's %s Server - Founded Vendor Name %s" % (i,manufacturer))
                            for j in commonSchema['ModelSchema'][i]:
                                if j in model:
                                    logging.info("Model using %s - Founded Model Name %s" % (j,model))
                                    modelSchema = commonSchema['ModelSchema'][i][j]
                                else:
                                    logging.debug("Model isn't %s - Founded Model Name %s" % (j,model))        
                            break
                        else:
                            logging.debug("This's not %s Server - Founded Vendor Name %s" % (i,manufacturer))
                    if modelSchema:
                        logging.info("We will generate data model with schema file: %s" % (modelSchema))
                    else:
                        logging.error("We couldn't find any schema similar with server model: %s. Please check schema directory" % (model))
                        return
            else:
                logging.error("$jsonpath is not existed")
        else:
            logging.error("$inituri is not existed")
    
    dataPointURI = dict()
    if modelSchema is None:
        logging.error("modelSchema return None, please check again")
    elif dataKeyDict is None:
        logging.error("dataKeyDict return None, please check again")
    else:
        modelSchemaDir = templateDir + "schemas/" + modelSchema
        schema=readYAMLTemplate(modelSchemaDir, dataKeyDict)
        # logging.info("Schema: %s" % schema)
        metadata = schema['Metadata']
        dataNewSchema = schema['Data']
        componentURIList = list()
        dataURIDict = dict()
        componentDictURL = dict()
        for componentName in metadata:
            if '$inituri' in metadata[componentName]:
                if '$jsonpath' in metadata[componentName]:
                    componentURL = endpointURL + metadata[componentName]['$inituri']
                    componentURIList.append(componentURL)
                    componentDictURL[componentURL] = componentName
                else:
                    dataURIDict.setdefault(componentName, []).append(metadata[componentName]['$inituri'])
            else:
                logging.error("Wrong Condition")
        # logging.error(dataURIDict)
        logging.info(componentURIList)
        dataPointURI = asyncio.run(fetch_all(componentURIList,auth))
        for componentURI in dataPointURI:
            logging.info(componentURI)
            logging.info(componentDictURL[componentURI])
            dataURIDict[str(componentDictURL[componentURI])] = jsonpathCollector(dataPointURI[componentURI],str(metadata[componentDictURL[componentURI]]['$jsonpath']))

        dataURLDict = dict()
        for key in dataURIDict:
            dataURLDict[key] = [endpointURL + path for path in dataURIDict[key]]

        urlList = list()
        componentRawDataDict = dict()
        for componentName in dataURLDict:
            # logging.error(dataURLDict[componentName])
            if isinstance (dataURLDict[componentName],list):
                dataRaw = asyncio.run(fetch_all(dataURLDict[componentName],auth))
                # urlList.extend(dataURLDict[componentName])
        # logging.error(urlList)
                if len(dataURLDict[componentName]) == 1:
                    componentRawData = dataRaw[next(iter(dataRaw))]
                    componentRawDataDict[componentName] = componentRawData
                else:
                    componentRawData = [dataRaw[url] for url in dataRaw]
                    componentRawDataDict[componentName] = componentRawData


    return componentRawDataDict 

if __name__ == '__main__':
    # serverAddress='10.97.12.3'
    # username='juniper'
    # password='juniper@123'

    serverAddress='10.97.12.1'
    username='readonly'
    password='juniper@123'

    logLevel='info'
    templateDir='./templates/'

    dataRaw = dataReconstruction(serverAddress,username,password,templateDir,logLevel=logLevel)
    logging.info(dataRaw)
    # logging.info(newData)
